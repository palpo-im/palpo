use clap::Subcommand;
use futures_util::{FutureExt, StreamExt, TryFutureExt};

use crate::{AppError, AppResult, checked};
use crate::admin_command;
use crate::macros::admin_command_dispatch;

#[derive(Debug, Subcommand)]
#[admin_command_dispatch]
pub(super) enum AppserviceCommand {
    /// - Register an appservice using its registration YAML
    ///
    /// This command needs a YAML generated by an appservice (such as a bridge),
    /// which must be provided in a Markdown code block below the command.
    ///
    /// Registering a new bridge using the ID of an existing bridge will replace
    /// the old one.
    Register,

    /// - Unregister an appservice using its ID
    ///
    /// You can find the ID using the `list-appservices` command.
    Unregister {
        /// The appservice to unregister
        appservice_identifier: String,
    },

    /// - Show an appservice's config using its ID
    ///
    /// You can find the ID using the `list-appservices` command.
    #[clap(alias("show"))]
    ShowAppserviceConfig {
        /// The appservice to show
        appservice_identifier: String,
    },

    /// - List all the currently registered appservices
    #[clap(alias("list"))]
    ListRegistered,
}

#[admin_command]
pub(super) async fn register(&self) -> AppResult<()> {
    let body = &self.body;
    let body_len = self.body.len();
    if body_len < 2 || !body[0].trim().starts_with("```") || body.last().unwrap_or(&"").trim() != "```" {
        return Err(AppError::public("Expected code block in command body. Add --help for details."));
    }

    let range = 1..checked!(body_len - 1)?;
    let appservice_config_body = body[range].join("\n");
    let parsed_config = serde_yaml::from_str(&appservice_config_body);
    match parsed_config {
        Err(e) => return Err(AppError::public(format!("Could not parse appservice config as YAML: {e}"))),
        Ok(registration) => match self
            .services
            .appservice
            .register_appservice(&registration, &appservice_config_body)
            .await
            .map(|()| registration.id)
        {
            Err(e) => return Err(AppError::public(format!("Failed to register appservice: {e}"))),
            Ok(id) => write!(self, "Appservice registered with ID: {id}"),
        },
    }
    .await
}

#[admin_command]
pub(super) async fn unregister(&self, appservice_identifier: String) -> AppResult<()> {
    match self
        .services
        .appservice
        .unregister_appservice(&appservice_identifier)
        .await
    {
        Err(e) => return Err(AppError::public(format!("Failed to unregister appservice: {e}"))),
        Ok(()) => write!(self, "Appservice unregistered."),
    }
    .await
}

#[admin_command]
pub(super) async fn show_appservice_config(&self, appservice_identifier: String) -> AppResult<()> {
    match self.services.appservice.get_registration(&appservice_identifier).await {
        None => return Err(AppError::public("Appservice does not exist.")),
        Some(config) => {
            let config_str = serde_yaml::to_string(&config)?;
            write!(
                self,
                "Config for {appservice_identifier}:\n\n```yaml\n{config_str}\n```"
            )
        }
    }
    .await
}

#[admin_command]
pub(super) async fn list_registered(&self) -> AppResult<()> {
    self.services
        .appservice
        .iter_ids()
        .collect()
        .map(Ok)
        .and_then(|appservices: Vec<_>| {
            let len = appservices.len();
            let list = appservices.join(", ");
            write!(self, "Appservices ({len}): {list}")
        })
        .await
}
