use clap::Subcommand;

use crate::admin::Context;
use crate::macros::admin_command_dispatch;
use crate::{AppError, AppResult};

#[derive(Debug, Subcommand)]
#[admin_command_dispatch]
pub(super) enum AppserviceCommand {
    /// - Register an appservice using its registration YAML
    ///
    /// This command needs a YAML generated by an appservice (such as a bridge),
    /// which must be provided in a Markdown code block below the command.
    ///
    /// Registering a new bridge using the ID of an existing bridge will replace
    /// the old one.
    Register,

    /// - Unregister an appservice using its ID
    ///
    /// You can find the ID using the `list-appservices` command.
    Unregister {
        /// The appservice to unregister
        appservice_identifier: String,
    },

    /// - Show an appservice's config using its ID
    ///
    /// You can find the ID using the `list-appservices` command.
    #[clap(alias("show"))]
    ShowAppserviceConfig {
        /// The appservice to show
        appservice_identifier: String,
    },

    /// - List all the currently registered appservices
    #[clap(alias("list"))]
    ListRegistered,
}

pub(super) async fn register(ctx: &Context<'_>) -> AppResult<()> {
    let body = &ctx.body;
    let body_len = ctx.body.len();
    if body_len < 2
        || !body[0].trim().starts_with("```")
        || body.last().unwrap_or(&"").trim() != "```"
    {
        return Err(AppError::public(
            "Expected code block in command body. Add --help for details.",
        ));
    }

    unimplemented!()
    // let range = 1..(body_len - 1);
    // let appservice_config_body = body[range].join("\n");
    // let parsed_config = serde_yaml::from_str(&appservice_config_body);
    // match parsed_config {
    //     Err(e) => {
    //         return Err(AppError::public(format!(
    //             "Could not parse appservice config as YAML: {e}"
    //         )));
    //     }
    //     Ok(registration) => match crate::appservice::register_appservice(registration.clone(), &appservice_config_body)
    //         .map(|_| registration.id)
    //     {
    //         Err(e) => return Err(AppError::public(format!("Failed to register appservice: {e}"))),
    //         Ok(id) => write!(ctx, "Appservice registered with ID: {id}"),
    //     },
    // }
    // .await
}

pub(super) async fn unregister(ctx: &Context<'_>, appservice_identifier: String) -> AppResult<()> {
    match crate::appservice::unregister_appservice(&appservice_identifier) {
        Err(e) => {
            return Err(AppError::public(format!(
                "Failed to unregister appservice: {e}"
            )));
        }
        Ok(()) => write!(ctx, "Appservice unregistered."),
    }
    .await
}

pub(super) async fn show_appservice_config(
    ctx: &Context<'_>,
    appservice_identifier: String,
) -> AppResult<()> {
    match crate::appservice::get_registration(&appservice_identifier)? {
        None => return Err(AppError::public("Appservice does not exist.")),
        Some(config) => {
            let config_str = serde_yaml::to_string(&config)?;
            write!(
                ctx,
                "Config for {appservice_identifier}:\n\n```yaml\n{config_str}\n```"
            )
        }
    }
    .await
}

pub(super) async fn list_registered(ctx: &Context<'_>) -> AppResult<()> {
    let appservices = crate::appservice::all()?;
    let list = appservices.keys().collect::<Vec<_>>();
    let len = appservices.len();
    { write!(ctx, "Appservices ({len}): {list:?}") }.await?;
    Ok(())
}
