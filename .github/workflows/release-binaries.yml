# GitHub actions workflow which builds the release artifacts.

name: Release binary artifacts

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    # branches: [main, next]
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

#  https://github.com/taiki-e/cargo-hack/blob/main/.github/workflows/release.yml
jobs:
  create-release:
    name: Create GitHub release
    # only publish from the origin repository
    if: github.repository_owner == 'palpo-im'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1.3.0
        with:
          # changelog: "CHANGELOG.md"
          title: "$version"
          branch: main
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-binaries:
    name: "Upload release binaries"
    if: github.repository_owner == 'palpo-im'
    needs: create-release
    strategy:
      matrix:
        include:
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-latest
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          # - target: universal-apple-darwin
          #   os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 120
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/github-actions/install-rust@stable
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - name: Install PostgreSQL development libraries
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y openssl libssl-dev libpq-dev
      - name: Install PostgreSQL development libraries (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install postgresql
      - name: Install PostgreSQL development libraries (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install postgresql --no-progress
      - name: Set PostgreSQL environment variables (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $pgRoot = "C:/Program Files/PostgreSQL/16"
          if (!(Test-Path $pgRoot)) {
            $pgRoot = "C:/Program Files/PostgreSQL/17"
          }
          if (!(Test-Path $pgRoot)) {
            Write-Error "PostgreSQL not found in C:/Program Files/PostgreSQL/16 or 17. Please check installation."
            exit 1
          }
          echo "PGROOT=$pgRoot" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$($pgRoot)/lib;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$($pgRoot)/include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PATH=$($pgRoot)/bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: palpo
          include: palpo-example.toml,palpo-required.toml,LICENSE,README.md
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}